{
  "address": "0xFcDCE27FE8751f36aB4cB8FBc89F0BB8b117e964",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "VRFCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughEthSpent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "transferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "upkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lotteryState",
      "outputs": [
        {
          "internalType": "enum theLotteryContract.lotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a6fbc9fbe9e68927a7bd0d612c961a40029573a7120b6b0f54ed26ff4328e1c",
  "receipt": {
    "to": null,
    "from": "0x3aF4c1719797c9e0574EA8644A54deA010D53a44",
    "contractAddress": "0xFcDCE27FE8751f36aB4cB8FBc89F0BB8b117e964",
    "transactionIndex": 12,
    "gasUsed": "1331805",
    "logsBloom": "0x
    "blockHash": "0xb693e74879140c67a0f9a3cf1483f81c98725c7689d61b7d7cfd412b6fe65651",
    "transactionHash": "0x3a6fbc9fbe9e68927a7bd0d612c961a40029573a7120b6b0f54ed26ff4328e1c",
    "logs": [],
    "blockNumber": 7626477,
    "cumulativeGasUsed": "3973933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "300",
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "22455",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "20bb0657ace53e3a1000c178b1f60ab5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"VRFCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughEthSpent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"transferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"upkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lotteryState\",\"outputs\":[{\"internalType\":\"enum theLotteryContract.lotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/theLotteryContract.sol\":\"theLotteryContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/theLotteryContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\nerror notEnoughEthSpent();\\r\\nerror lotteryNotOpen();\\r\\nerror upkeepNotNeeded();\\r\\nerror transferFailed();\\r\\n\\r\\ncontract theLotteryContract is VRFConsumerBaseV2 {\\r\\n    enum lotteryState {\\r\\n        open,\\r\\n        calculating\\r\\n    }\\r\\n\\r\\n    lotteryState public s_lotteryState;\\r\\n    uint256 i_entranceFee;\\r\\n    address payable[] public s_players;\\r\\n    uint256 public immutable i_interval;\\r\\n    uint256 public s_lastTimeStamp;\\r\\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\r\\n    bytes32 public i_gasLane;\\r\\n    uint64 public i_subscriptionId;\\r\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 public i_callbackGasLimit;\\r\\n    uint32 public constant NUM_WORDS = 1;\\r\\n    address public s_recentWinner;\\r\\n\\r\\n    event LotteryEntered(address indexed player);\\r\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\r\\n    event winnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        uint256 entranceFee,\\r\\n        uint256 interval,\\r\\n        address VRFCoordinatorV2,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit\\r\\n    ) VRFConsumerBaseV2(VRFCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_interval = interval;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(VRFCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n    }\\r\\n\\r\\n    function enterLottery() external payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert notEnoughEthSpent();\\r\\n        }\\r\\n        if (s_lotteryState != lotteryState.open) {\\r\\n            revert lotteryNotOpen();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit LotteryEntered(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpKeep(bytes memory) public view returns (bool upkeepNeeded, bytes memory) {\\r\\n        bool isOpen = lotteryState.open == s_lotteryState;\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata) external {\\r\\n        (bool upkeepNeeded, ) = checkUpKeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert upkeepNotNeeded();\\r\\n        }\\r\\n        s_lotteryState = lotteryState.calculating;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedLotteryWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_players = new address payable[](0);\\r\\n        s_lotteryState = lotteryState.open;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        s_recentWinner = recentWinner;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert transferFailed();\\r\\n        }\\r\\n        emit winnerPicked(recentWinner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13e0e1cfb61e7c2814880fa4255ba4599d35258c97f222448673725a9459286c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620018c3380380620018c3833981810160405281019062000037919062000280565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050856001819055508460a08181525050426003819055508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260048190555081600560006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600560086101000a81548163ffffffff021916908363ffffffff1602179055505050505050506200031c565b600080fd5b6000819050919050565b62000134816200011f565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000187826200015a565b9050919050565b62000199816200017a565b8114620001a557600080fd5b50565b600081519050620001b9816200018e565b92915050565b6000819050919050565b620001d481620001bf565b8114620001e057600080fd5b50565b600081519050620001f481620001c9565b92915050565b600067ffffffffffffffff82169050919050565b6200021981620001fa565b81146200022557600080fd5b50565b60008151905062000239816200020e565b92915050565b600063ffffffff82169050919050565b6200025a816200023f565b81146200026657600080fd5b50565b6000815190506200027a816200024f565b92915050565b60008060008060008060c08789031215620002a0576200029f6200011a565b5b6000620002b089828a0162000143565b9650506020620002c389828a0162000143565b9550506040620002d689828a01620001a8565b9450506060620002e989828a01620001e3565b9350506080620002fc89828a0162000228565b92505060a06200030f89828a0162000269565b9150509295509295509295565b60805160601c60a05160c05160601c61155c62000367600039600081816104ba015261076801526000818161062801526106d401526000818161037401526103c8015261155c6000f3fe6080604052600436106100e85760003560e01c806372cf6e341161008a578063aebc455011610059578063aebc4550146102e7578063c1af578514610312578063d4c8c3731461031c578063d757d02714610347576100e8565b806372cf6e34146102295780638638b0c6146102545780638e879c8a1461027f578063ae771f6b146102aa576100e8565b8063470cdf97116100c6578063470cdf971461016a5780635e6c102e1461019557806367f082b0146101d35780636919207d146101fe576100e8565b80631fe543e3146100ed57806334854043146101165780634585e33b14610141575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610d7c565b610372565b005b34801561012257600080fd5b5061012b610432565b6040516101389190610de7565b60405180910390f35b34801561014d57600080fd5b5061016860048036038101906101639190610e5d565b610438565b005b34801561017657600080fd5b5061017f6105cc565b60405161018c9190610ecd565b60405180910390f35b3480156101a157600080fd5b506101bc60048036038101906101b79190610f9d565b6105e6565b6040516101ca929190611089565b60405180910390f35b3480156101df57600080fd5b506101e86106cd565b6040516101f591906110d6565b60405180910390f35b34801561020a57600080fd5b506102136106d2565b6040516102209190610de7565b60405180910390f35b34801561023557600080fd5b5061023e6106f6565b60405161024b9190611110565b60405180910390f35b34801561026057600080fd5b506102696106fb565b604051610276919061116c565b60405180910390f35b34801561028b57600080fd5b50610294610721565b6040516102a191906111a0565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc91906111bb565b610727565b6040516102de9190611209565b60405180910390f35b3480156102f357600080fd5b506102fc610766565b6040516103099190611283565b60405180910390f35b61031a61078a565b005b34801561032857600080fd5b506103316108d9565b60405161033e9190611315565b60405180910390f35b34801561035357600080fd5b5061035c6108ea565b6040516103699190611110565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b929190611330565b60405180910390fd5b61042e8282610900565b5050565b60035481565b6000610452604051806020016040528060008152506105e6565b5090508061048c576040517f078647e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff021916908360018111156104b1576104b061129e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600560009054906101000a900467ffffffffffffffff166003600560089054906101000a900463ffffffff1660016040518663ffffffff1660e01b8152600401610545959493929190611359565b602060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059791906113c1565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b600560009054906101000a900467ffffffffffffffff1681565b6000606060008060009054906101000a900460ff16600181111561060d5761060c61129e565b5b600060018111156106215761062061129e565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060035442610655919061141d565b119050600080471190506000806002805490501190508280156106755750835b801561067e5750815b80156106875750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b6005600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6002818154811061073757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001543410156107c6576040517f2ea82fd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107da576107d961129e565b5b60008054906101000a900460ff1660018111156107fa576107f961129e565b5b14610831576040517fc1934d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b60008054906101000a900460ff1681565b600560089054906101000a900463ffffffff1681565b60006002805490508260008151811061091c5761091b611451565b5b602002602001015161092e91906114af565b905060006002828154811061094657610945611451565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff81111561098e5761098d610c39565b5b6040519080825280602002602001820160405280156109bc5781602001602082028036833780820191505090505b50600290805190602001906109d2929190610b32565b5060008060006101000a81548160ff021916908360018111156109f8576109f761129e565b5b021790555042600381905550806005600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a6b90611511565b60006040518083038185875af1925050503d8060008114610aa8576040519150601f19603f3d011682016040523d82523d6000602084013e610aad565b606091505b5050905080610ae8576040517fe465903e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610bab579160200282015b82811115610baa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b52565b5b509050610bb89190610bbc565b5090565b5b80821115610bd5576000816000905550600101610bbd565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c0081610bed565b8114610c0b57600080fd5b50565b600081359050610c1d81610bf7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7182610c28565b810181811067ffffffffffffffff82111715610c9057610c8f610c39565b5b80604052505050565b6000610ca3610bd9565b9050610caf8282610c68565b919050565b600067ffffffffffffffff821115610ccf57610cce610c39565b5b602082029050602081019050919050565b600080fd5b6000610cf8610cf384610cb4565b610c99565b90508083825260208201905060208402830185811115610d1b57610d1a610ce0565b5b835b81811015610d445780610d308882610c0e565b845260208401935050602081019050610d1d565b5050509392505050565b600082601f830112610d6357610d62610c23565b5b8135610d73848260208601610ce5565b91505092915050565b60008060408385031215610d9357610d92610be3565b5b6000610da185828601610c0e565b925050602083013567ffffffffffffffff811115610dc257610dc1610be8565b5b610dce85828601610d4e565b9150509250929050565b610de181610bed565b82525050565b6000602082019050610dfc6000830184610dd8565b92915050565b600080fd5b60008083601f840112610e1d57610e1c610c23565b5b8235905067ffffffffffffffff811115610e3a57610e39610e02565b5b602083019150836001820283011115610e5657610e55610ce0565b5b9250929050565b60008060208385031215610e7457610e73610be3565b5b600083013567ffffffffffffffff811115610e9257610e91610be8565b5b610e9e85828601610e07565b92509250509250929050565b600067ffffffffffffffff82169050919050565b610ec781610eaa565b82525050565b6000602082019050610ee26000830184610ebe565b92915050565b600080fd5b600067ffffffffffffffff821115610f0857610f07610c39565b5b610f1182610c28565b9050602081019050919050565b82818337600083830152505050565b6000610f40610f3b84610eed565b610c99565b905082815260208101848484011115610f5c57610f5b610ee8565b5b610f67848285610f1e565b509392505050565b600082601f830112610f8457610f83610c23565b5b8135610f94848260208601610f2d565b91505092915050565b600060208284031215610fb357610fb2610be3565b5b600082013567ffffffffffffffff811115610fd157610fd0610be8565b5b610fdd84828501610f6f565b91505092915050565b60008115159050919050565b610ffb81610fe6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103b578082015181840152602081019050611020565b8381111561104a576000848401525b50505050565b600061105b82611001565b611065818561100c565b935061107581856020860161101d565b61107e81610c28565b840191505092915050565b600060408201905061109e6000830185610ff2565b81810360208301526110b08184611050565b90509392505050565b600061ffff82169050919050565b6110d0816110b9565b82525050565b60006020820190506110eb60008301846110c7565b92915050565b600063ffffffff82169050919050565b61110a816110f1565b82525050565b60006020820190506111256000830184611101565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111568261112b565b9050919050565b6111668161114b565b82525050565b6000602082019050611181600083018461115d565b92915050565b6000819050919050565b61119a81611187565b82525050565b60006020820190506111b56000830184611191565b92915050565b6000602082840312156111d1576111d0610be3565b5b60006111df84828501610c0e565b91505092915050565b60006111f38261112b565b9050919050565b611203816111e8565b82525050565b600060208201905061121e60008301846111fa565b92915050565b6000819050919050565b600061124961124461123f8461112b565b611224565b61112b565b9050919050565b600061125b8261122e565b9050919050565b600061126d82611250565b9050919050565b61127d81611262565b82525050565b60006020820190506112986000830184611274565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106112de576112dd61129e565b5b50565b60008190506112ef826112cd565b919050565b60006112ff826112e1565b9050919050565b61130f816112f4565b82525050565b600060208201905061132a6000830184611306565b92915050565b6000604082019050611345600083018561115d565b611352602083018461115d565b9392505050565b600060a08201905061136e6000830188611191565b61137b6020830187610ebe565b61138860408301866110c7565b6113956060830185611101565b6113a26080830184611101565b9695505050505050565b6000815190506113bb81610bf7565b92915050565b6000602082840312156113d7576113d6610be3565b5b60006113e5848285016113ac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142882610bed565b915061143383610bed565b925082821015611446576114456113ee565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ba82610bed565b91506114c583610bed565b9250826114d5576114d4611480565b5b828206905092915050565b600081905092915050565b50565b60006114fb6000836114e0565b9150611506826114eb565b600082019050919050565b600061151c826114ee565b915081905091905056fea264697066735822122093ed5ded35f89bd134ccbff3c9919f1840d55a8a3748ec74274ffc1c0df2f0d064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806372cf6e341161008a578063aebc455011610059578063aebc4550146102e7578063c1af578514610312578063d4c8c3731461031c578063d757d02714610347576100e8565b806372cf6e34146102295780638638b0c6146102545780638e879c8a1461027f578063ae771f6b146102aa576100e8565b8063470cdf97116100c6578063470cdf971461016a5780635e6c102e1461019557806367f082b0146101d35780636919207d146101fe576100e8565b80631fe543e3146100ed57806334854043146101165780634585e33b14610141575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610d7c565b610372565b005b34801561012257600080fd5b5061012b610432565b6040516101389190610de7565b60405180910390f35b34801561014d57600080fd5b5061016860048036038101906101639190610e5d565b610438565b005b34801561017657600080fd5b5061017f6105cc565b60405161018c9190610ecd565b60405180910390f35b3480156101a157600080fd5b506101bc60048036038101906101b79190610f9d565b6105e6565b6040516101ca929190611089565b60405180910390f35b3480156101df57600080fd5b506101e86106cd565b6040516101f591906110d6565b60405180910390f35b34801561020a57600080fd5b506102136106d2565b6040516102209190610de7565b60405180910390f35b34801561023557600080fd5b5061023e6106f6565b60405161024b9190611110565b60405180910390f35b34801561026057600080fd5b506102696106fb565b604051610276919061116c565b60405180910390f35b34801561028b57600080fd5b50610294610721565b6040516102a191906111a0565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc91906111bb565b610727565b6040516102de9190611209565b60405180910390f35b3480156102f357600080fd5b506102fc610766565b6040516103099190611283565b60405180910390f35b61031a61078a565b005b34801561032857600080fd5b506103316108d9565b60405161033e9190611315565b60405180910390f35b34801561035357600080fd5b5061035c6108ea565b6040516103699190611110565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b929190611330565b60405180910390fd5b61042e8282610900565b5050565b60035481565b6000610452604051806020016040528060008152506105e6565b5090508061048c576040517f078647e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff021916908360018111156104b1576104b061129e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600560009054906101000a900467ffffffffffffffff166003600560089054906101000a900463ffffffff1660016040518663ffffffff1660e01b8152600401610545959493929190611359565b602060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059791906113c1565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b600560009054906101000a900467ffffffffffffffff1681565b6000606060008060009054906101000a900460ff16600181111561060d5761060c61129e565b5b600060018111156106215761062061129e565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060035442610655919061141d565b119050600080471190506000806002805490501190508280156106755750835b801561067e5750815b80156106875750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b6005600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6002818154811061073757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001543410156107c6576040517f2ea82fd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107da576107d961129e565b5b60008054906101000a900460ff1660018111156107fa576107f961129e565b5b14610831576040517fc1934d5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b60008054906101000a900460ff1681565b600560089054906101000a900463ffffffff1681565b60006002805490508260008151811061091c5761091b611451565b5b602002602001015161092e91906114af565b905060006002828154811061094657610945611451565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff81111561098e5761098d610c39565b5b6040519080825280602002602001820160405280156109bc5781602001602082028036833780820191505090505b50600290805190602001906109d2929190610b32565b5060008060006101000a81548160ff021916908360018111156109f8576109f761129e565b5b021790555042600381905550806005600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a6b90611511565b60006040518083038185875af1925050503d8060008114610aa8576040519150601f19603f3d011682016040523d82523d6000602084013e610aad565b606091505b5050905080610ae8576040517fe465903e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610bab579160200282015b82811115610baa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b52565b5b509050610bb89190610bbc565b5090565b5b80821115610bd5576000816000905550600101610bbd565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c0081610bed565b8114610c0b57600080fd5b50565b600081359050610c1d81610bf7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7182610c28565b810181811067ffffffffffffffff82111715610c9057610c8f610c39565b5b80604052505050565b6000610ca3610bd9565b9050610caf8282610c68565b919050565b600067ffffffffffffffff821115610ccf57610cce610c39565b5b602082029050602081019050919050565b600080fd5b6000610cf8610cf384610cb4565b610c99565b90508083825260208201905060208402830185811115610d1b57610d1a610ce0565b5b835b81811015610d445780610d308882610c0e565b845260208401935050602081019050610d1d565b5050509392505050565b600082601f830112610d6357610d62610c23565b5b8135610d73848260208601610ce5565b91505092915050565b60008060408385031215610d9357610d92610be3565b5b6000610da185828601610c0e565b925050602083013567ffffffffffffffff811115610dc257610dc1610be8565b5b610dce85828601610d4e565b9150509250929050565b610de181610bed565b82525050565b6000602082019050610dfc6000830184610dd8565b92915050565b600080fd5b60008083601f840112610e1d57610e1c610c23565b5b8235905067ffffffffffffffff811115610e3a57610e39610e02565b5b602083019150836001820283011115610e5657610e55610ce0565b5b9250929050565b60008060208385031215610e7457610e73610be3565b5b600083013567ffffffffffffffff811115610e9257610e91610be8565b5b610e9e85828601610e07565b92509250509250929050565b600067ffffffffffffffff82169050919050565b610ec781610eaa565b82525050565b6000602082019050610ee26000830184610ebe565b92915050565b600080fd5b600067ffffffffffffffff821115610f0857610f07610c39565b5b610f1182610c28565b9050602081019050919050565b82818337600083830152505050565b6000610f40610f3b84610eed565b610c99565b905082815260208101848484011115610f5c57610f5b610ee8565b5b610f67848285610f1e565b509392505050565b600082601f830112610f8457610f83610c23565b5b8135610f94848260208601610f2d565b91505092915050565b600060208284031215610fb357610fb2610be3565b5b600082013567ffffffffffffffff811115610fd157610fd0610be8565b5b610fdd84828501610f6f565b91505092915050565b60008115159050919050565b610ffb81610fe6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103b578082015181840152602081019050611020565b8381111561104a576000848401525b50505050565b600061105b82611001565b611065818561100c565b935061107581856020860161101d565b61107e81610c28565b840191505092915050565b600060408201905061109e6000830185610ff2565b81810360208301526110b08184611050565b90509392505050565b600061ffff82169050919050565b6110d0816110b9565b82525050565b60006020820190506110eb60008301846110c7565b92915050565b600063ffffffff82169050919050565b61110a816110f1565b82525050565b60006020820190506111256000830184611101565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111568261112b565b9050919050565b6111668161114b565b82525050565b6000602082019050611181600083018461115d565b92915050565b6000819050919050565b61119a81611187565b82525050565b60006020820190506111b56000830184611191565b92915050565b6000602082840312156111d1576111d0610be3565b5b60006111df84828501610c0e565b91505092915050565b60006111f38261112b565b9050919050565b611203816111e8565b82525050565b600060208201905061121e60008301846111fa565b92915050565b6000819050919050565b600061124961124461123f8461112b565b611224565b61112b565b9050919050565b600061125b8261122e565b9050919050565b600061126d82611250565b9050919050565b61127d81611262565b82525050565b60006020820190506112986000830184611274565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106112de576112dd61129e565b5b50565b60008190506112ef826112cd565b919050565b60006112ff826112e1565b9050919050565b61130f816112f4565b82525050565b600060208201905061132a6000830184611306565b92915050565b6000604082019050611345600083018561115d565b611352602083018461115d565b9392505050565b600060a08201905061136e6000830188611191565b61137b6020830187610ebe565b61138860408301866110c7565b6113956060830185611101565b6113a26080830184611101565b9695505050505050565b6000815190506113bb81610bf7565b92915050565b6000602082840312156113d7576113d6610be3565b5b60006113e5848285016113ac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142882610bed565b915061143383610bed565b925082821015611446576114456113ee565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ba82610bed565b91506114c583610bed565b9250826114d5576114d4611480565b5b828206905092915050565b600081905092915050565b50565b60006114fb6000836114e0565b9150611506826114eb565b600082019050919050565b600061151c826114ee565b915081905091905056fea264697066735822122093ed5ded35f89bd134ccbff3c9919f1840d55a8a3748ec74274ffc1c0df2f0d064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(lotteryState)163"
      },
      {
        "astId": 168,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "i_entranceFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 171,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 180,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "i_gasLane",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 182,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "i_subscriptionId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 187,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "i_callbackGasLimit",
        "offset": 8,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 192,
        "contract": "contracts/theLotteryContract.sol:theLotteryContract",
        "label": "s_recentWinner",
        "offset": 12,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(lotteryState)163": {
        "encoding": "inplace",
        "label": "enum theLotteryContract.lotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}